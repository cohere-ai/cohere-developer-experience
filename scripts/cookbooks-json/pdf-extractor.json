{
  "custompage": {
    "metadata": {
      "image": [],
      "title": "",
      "description": "",
      "keywords": ""
    },
    "algolia": {
      "recordCount": 8,
      "publishPending": false,
      "updatedAt": "2024-07-11T01:20:30.658Z"
    },
    "title": "PDF Extractor with Native Multi Step Tool Use",
    "slug": "pdf-extractor",
    "body": "[block:html]\n{\n  \"html\": \"<div class=\\\"cookbook-nav-container\\\">\\n  <a href=\\\"/page/cookbooks\\\" class=\\\"back-button pt-10 group inline-block cursor-pointer font-medium \\\" rel=\\\"noreferrer\\\"\\n    target=\\\"_self\\\">\\n    <div class=\\\"pr-1 inline-block group-hover:no-underline\\\">\\n      <svg width=\\\"11.8\\\" height=\\\"11\\\" viewBox=\\\"0 0 14 13\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <path\\n          d=\\\"M1.1554 7.20808C1.35066 7.40335 1.66724 7.40335 1.8625 7.20808L7.18477 1.88582C7.38003 1.69055 7.38003 1.37397 7.18477 1.17871L6.83121 0.825157C6.63595 0.629895 6.31937 0.629896 6.12411 0.825157L0.801842 6.14742C0.60658 6.34269 0.60658 6.65927 0.801842 6.85453L1.1554 7.20808Z\\\"\\n          fill=\\\"currentColor\\\" />\\n        <path\\n          d=\\\"M1.1554 5.79226C1.35066 5.597 1.66724 5.597 1.8625 5.79226L7.18477 11.1145C7.38003 11.3098 7.38003 11.6264 7.18477 11.8216L6.83121 12.1752C6.63595 12.3705 6.31937 12.3705 6.12411 12.1752L0.801842 6.85292C0.60658 6.65766 0.60658 6.34108 0.801842 6.14582L1.1554 5.79226Z\\\"\\n          fill=\\\"currentColor\\\" />\\n        <path\\n          d=\\\"M2.52491 6.23674C2.52492 5.9606 2.74878 5.73675 3.02491 5.73675H6.28412C6.4513 5.73675 6.60742 5.8203 6.70015 5.95941L7.03347 6.45941C7.25499 6.79169 7.01679 7.23675 6.61745 7.23675H3.0249C2.74876 7.23675 2.5249 7.01289 2.5249 6.73674L2.52491 6.23674Z\\\"\\n          fill=\\\"currentColor\\\" />\\n        <path\\n          d=\\\"M13.5517 6.73676C13.5517 7.0129 13.3278 7.23675 13.0517 7.23675H8.79246C8.62528 7.23675 8.46916 7.1532 8.37643 7.0141L8.04311 6.5141C7.8216 6.18182 8.05979 5.73675 8.45914 5.73675H13.0517C13.3278 5.73675 13.5517 5.96062 13.5517 6.23676L13.5517 6.73676Z\\\"\\n          fill=\\\"currentColor\\\" />\\n      </svg>\\n    </div>\\n    Back to Cookbooks\\n  </a>\\n\\n  <a href=https://github.com/cohere-ai/cohere-developer-experience/blob/main/notebooks/agents/pdf-extractor/pdf_extractor.ipynb class=\\\"github-button pt-10 group inline-block cursor-pointer font-medium \\\" rel=\\\"noreferrer\\\"\\n    target=\\\"_blank\\\">\\n    Open in GitHub\\n    <div class=\\\"pl-1 inline-block group-hover:no-underline\\\">\\n      <svg width=\\\"14\\\" height=\\\"10\\\" viewBox=\\\"0 0 14 10\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <path\\n          d=\\\"M8.63218 0.366821C8.35604 0.366821 8.13218 0.590679 8.13218 0.866821V8.39364C8.13218 8.66978 8.35604 8.89364 8.63218 8.89364H9.13218C9.40832 8.89364 9.63218 8.66978 9.63218 8.39364V0.866821C9.63218 0.590678 9.40832 0.366821 9.13218 0.366821H8.63218Z\\\"\\n          fill=\\\"currentColor\\\" />\\n        <path\\n          d=\\\"M9.63332 1.36796C9.63332 1.6441 9.40946 1.86796 9.13332 1.86796H1.6065C1.33035 1.86796 1.1065 1.6441 1.1065 1.36796V0.867956C1.1065 0.591813 1.33035 0.367956 1.6065 0.367956H9.13332C9.40946 0.367956 9.63332 0.591813 9.63332 0.867956V1.36796Z\\\"\\n          fill=\\\"currentColor\\\" />\\n        <path\\n          d=\\\"M8.35063 2.02206C8.54588 2.21732 8.54588 2.5339 8.35062 2.72916L6.04601 5.03377C5.9278 5.15198 5.75833 5.20329 5.59439 5.1705L5.00515 5.05264C4.61356 4.97432 4.46728 4.49118 4.74966 4.2088L7.28997 1.66849C7.48523 1.47323 7.80182 1.47323 7.99708 1.6685L8.35063 2.02206Z\\\"\\n          fill=\\\"currentColor\\\" />\\n        <path\\n          d=\\\"M0.199967 9.46558C0.0047119 9.27032 0.0047151 8.95374 0.199974 8.75848L3.21169 5.74677C3.3299 5.62855 3.49938 5.57724 3.66331 5.61003L4.25256 5.72789C4.64414 5.80621 4.79042 6.28935 4.50804 6.57173L1.26063 9.81915C1.06536 10.0144 0.748774 10.0144 0.553513 9.81914L0.199967 9.46558Z\\\"\\n          fill=\\\"currentColor\\\" />\\n      </svg>\\n    </div>\\n  </a>\\n</div>\\n\\n<div>\\n  <h1>PDF Extractor with Native Multi Step Tool Use</h1>\\n</div>\\n\\n<!-- Authors -->\\n<div class=\\\"authors-container\\\">\\n  \\n  <div class=\\\"author-container\\\">\\n    <img class=\\\"author-image\\\" src=\\\"https://files.readme.io/0803e3d-Jason_Jung.jpg\\\" alt=\\\"Jason Jung\\\" />\\n    <p class=\\\"author-name\\\">Jason Jung</p>\\n  </div>\\n  \\n</div>\\n\\n<style>\\n  .header {\\n    padding: 9px 0 17px 0;\\n    display: flex;\\n    flex-direction: column;\\n  }\\n\\n  a[href],\\n  .field-description a:not([href=\\\"\\\"]),\\n  .markdown-body a[href],\\n  .markdown-body a:not([href=\\\"\\\"]) {\\n    text-decoration: none;\\n  }\\n\\n  #content {\\n    padding: 0 32px;\\n  }\\n\\n  #content-head {\\n    display: none;\\n  }\\n\\n  .guide-page-title {\\n    font-size: 29px !important;\\n  }\\n\\n  .back-button .github-button {\\n    border-radius: 0 !important;\\n    border-width: 0 !important;\\n    background-color: inherit !important;\\n  }\\n\\n  .cookbook-nav-container {\\n    display: flex;\\n    flex-direction: row;\\n    justify-content: space-between;\\n    align-items: center;\\n  }\\n\\n  .authors-container {\\n    display: flex;\\n    flex-direction: row;\\n    flex-flow: row wrap;\\n    gap: 2px 14px;\\n    margin-top: 8px;\\n  }\\n\\n  .author-container {\\n    line-height: 1.5em;\\n    display: flex;\\n    flex-direction: row;\\n    vertical-align: middle;\\n    flex-shrink: 0;\\n  }\\n\\n  .author-image {\\n    height: 1.5em;\\n    margin: 0px 6px 6px 0px !important;\\n    border-radius: 50%;\\n  }\\n\\n  .author-name {\\n    white-space: nowrap;\\n    vertical-align: middle;\\n  }\\n\\n  @media only screen and (min-width: 620px) {\\n    .guide-page-title {\\n      width: 70%;\\n    }\\n\\n    .header {\\n      display: flex;\\n      flex-direction: row;\\n      align-items: center;\\n      justify-content: space-between;\\n      padding: 9px 0 17px 0;\\n    }\\n\\n    .git--button {\\n      width: 145px !important;\\n      display: flex;\\n      flex-direction: row;\\n      justify-content: center;\\n      align-items: center;\\n      padding: 8px 16px;\\n\\n      width: 154px;\\n      height: 35px;\\n\\n      background: #D4D9D4;\\n      border: 1px solid #9DAAA4;\\n      border-radius: 6px;\\n    }\\n  }\\n\\n\\n  @media only screen and (min-width: 1024px) {\\n    .guide-page-title {\\n      font-size: 46px !important;\\n    }\\n\\n    .header {\\n      padding: 9px 0 32px 0;\\n    }\\n  }\\n</style>\"\n}\n[/block]\n\n\n## Objective\n\nGenerally, users are limited to text inputs when using large language models (LLMs), but agents enable the model to do more than ingest or output text information. Using tools, LLMs can call other APIs, save data, and much more. In this notebook, we will explore how we can leverage agents to extract information from PDFs. We will mimic an application where the user uploads PDF files and the agent extracts useful information. This can be useful when the text information has varying formats and you need to extract various types of information.\n\nIn the directory, we have a simple_invoice.pdf file. Everytime a user uploads the document, the agent will extract key information total_amount and invoice_number and then save it as CSV which then can be used in another application. We only extract two pieces of information in this demo, but users can extend the example and extract a lot more information.\n\n## Steps \n\n1. extract_pdf() function extracts text data from the PDF using [unstructured](https://unstructured.io/) package. You can use other packages like PyPDF2 as well.\n2. This extracted text is added to the prompt so the model can \"see\" the document.\n3. The agent summarizes the document and passes that information to convert_to_json() function. This function makes another call to command model to convert the summary to json output. This separation of tasks is useful when the text document is complicated and long. Therefore, we first distill the information and ask another model to convert the text into json object. This is useful so each model or agent focuses on its own task without suffering from long context.\n4. Then the json object goes through a check to make sure all keys are present and gets saved as a csv file. When the document is too long or the task is too complex, the model may fail to extract all information. These checks are then very useful because they give feedback to the model so it can adjust it's parameters to retry.\n\n\n\n```python\nimport os\n\nimport cohere\nimport pandas as pd\nimport json\nfrom unstructured.partition.pdf import partition_pdf\n```\n\n\n```python\n# uncomment to install dependencies\n# !pip install cohere unstructured\n```\n\n\n```python\n# versions\nprint('cohere version:', cohere.__version__)\n```\n\n    cohere version: 5.5.1\n\n\n## Setup \n\n\n```python\nCOHERE_API_KEY = os.environ.get(\"CO_API_KEY\")\nCOHERE_MODEL = 'command-r-plus'\nco = cohere.Client(api_key=COHERE_API_KEY)\n```\n\n## Data \n\nThe sample invoice data is from https://unidoc.io/media/simple-invoices/simple_invoice.pdf. \n\n\n\n\n\n## Tool \n\nHere we define the tool which converts summary of the pdf into json object. Then, it checks to make sure all necessary keys are present and saves it as csv. \n\n\n```python\ndef convert_to_json(text: str) -> dict:\n    \"\"\"\n    Given text files, convert to json object and saves to csv.\n\n    Args:\n        text (str): The text to extract information from.\n\n    Returns:\n        dict: A dictionary containing the result of the conversion process.\n    \"\"\"\n\n    MANDATORY_FIELDS = [\n        \"total_amount\",\n        \"invoice_number\",\n    ]\n\n    message = \"\"\"# Instruction\n    Given the text, convert to json object with the following keys:\n    total_amount, invoice_number\n\n    # Output format json:\n    {{\n        \"total_amount\": \"<extracted invoice total amount>\",\n        \"invoice_number\": \"<extracted invoice number>\",\n    }}\n\n    Do not output code blocks.\n\n    # Extracted PDF\n    {text}\n    \"\"\"\n\n    result = co.chat(\n        message=message.format(text=text), model=COHERE_MODEL, preamble=None\n    ).text\n\n    try:\n        result = json.loads(result)\n        # check if all keys are present\n        if not all(i in result.keys() for i in MANDATORY_FIELDS):\n            return {\"result\": f\"ERROR: Keys are missing. Please check your result {result}\"}\n\n        df = pd.DataFrame(result, index=[0])\n        df.to_csv(\"output.csv\", index=False)\n        return {\"result\": \"SUCCESS. All steps have been completed.\"}\n\n    except Exception as e:\n        return {\"result\": f\"ERROR: Could not load the result as json. Please check the result: {result} and ERROR: {e}\"}\n\n```\n\n### Cohere Agent \n\nBelow is a cohere agent that leverages multi-step API. It is equipped with convert_to_json tool. \n\n\n```python\ndef cohere_agent(\n    message: str,\n    preamble: str,\n    verbose: bool = False,\n) -> str:\n    \"\"\"\n    Function to handle multi-step tool use api.\n\n    Args:\n        message (str): The message to send to the Cohere AI model.\n        preamble (str): The preamble or context for the conversation.\n        verbose (bool, optional): Whether to print verbose output. Defaults to False.\n\n    Returns:\n        str: The final response from the call.\n    \"\"\"\n\n    functions_map = {\n        \"convert_to_json\": convert_to_json,\n    }\n\n    tools = [\n        {\n            \"name\": \"convert_to_json\",\n            \"description\": \"Given a text, convert it to json object.\",\n            \"parameter_definitions\": {\n                \"text\": {\n                    \"description\": \"text to be converted into json\",\n                    \"type\": \"str\",\n                    \"required\": True,\n                },\n            },\n        }\n    ]\n\n    counter = 1\n\n    response = co.chat(\n        model=COHERE_MODEL,\n        message=message,\n        preamble=preamble,\n        tools=tools,\n    )\n\n    if verbose:\n        print(f\"\\nrunning step 0\")\n        print(response.text)\n\n    while response.tool_calls:\n        tool_results = []\n\n        if verbose:\n            print(f\"\\nrunning step {counter}\")\n        for tool_call in response.tool_calls:\n            print(\"tool_call.parameters:\", tool_call.parameters)\n            if tool_call.parameters:\n                output = functions_map[tool_call.name](**tool_call.parameters)\n            else:\n                output = functions_map[tool_call.name]()\n\n            outputs = [output]\n            tool_results.append({\"call\": tool_call, \"outputs\": outputs})\n\n            if verbose:\n                print(\n                    f\"= running tool {tool_call.name}, with parameters: {tool_call.parameters}\"\n                )\n                print(f\"== tool results: {outputs}\")\n\n        response = co.chat(\n            model=COHERE_MODEL,\n            message=\"\",\n            chat_history=response.chat_history,\n            preamble=preamble,\n            tools=tools,\n            tool_results=tool_results,\n        )\n\n        if verbose:\n            print(response.text)\n            counter += 1\n\n    return response.text\n```\n\n### main \n\n\n```python\ndef extract_pdf(path):\n    \"\"\"\n    Function to extract text from a PDF file.\n    \"\"\"\n    elements = partition_pdf(path)\n    return \"\\n\".join([str(el) for el in elements])\n\n\ndef pdf_extractor(pdf_path):\n    \"\"\"\n    Main function that extracts pdf and calls the cohere agent.\n    \"\"\"\n    pdf_text = extract_pdf(pdf_path)\n\n    prompt = f\"\"\"\n    # Instruction\n    You are expert at extracting invoices from PDF. The text of the PDF file is given below.\n\n    You must follow the steps below:\n    1. Summarize the text and extract only the most information: total amount billed and invoice number.\n    2. Using the summary above, call convert_to_json tool, which uses the summary from step 1.\n    If you run into issues. Identifiy the issue and retry.\n    You are not done unless you see SUCCESS in the tool output.\n\n    # File Name:\n    {pdf_path}\n\n    # Extracted Text:\n    {pdf_text}\n    \"\"\"\n    output = cohere_agent(prompt, None, verbose=True)\n    print(f\"Finished extracting: {pdf_path}\")\n\n    print('Please check the output below')\n    print(pd.read_csv('output.csv'))\n\n\npdf_extractor('simple_invoice.pdf')\n\n```\n\n    \n    running step 0\n    I will summarise the text and then use the convert_to_json tool to format the summary.\n    \n    running step 1\n    tool_call.parameters: {'text': 'Total amount billed: $115.00\\nInvoice number: 0852'}\n    = running tool convert_to_json, with parameters: {'text': 'Total amount billed: $115.00\\nInvoice number: 0852'}\n    == tool results: [{'result': 'SUCCESS. All steps have been completed.'}]\n    SUCCESS.\n    Finished extracting: simple_invoice.pdf\n    Please check the output below\n      total_amount  invoice_number\n    0      $115.00             852\n\n\nAs shown above, the model first summarized the extracted pdf as `Total amount: $115.00\\nInvoice number: 0852` and sent this to `conver_to_json()` function. \n`conver_to_json()` then converts it to json format and saves it into a csv file.",
    "html": "",
    "htmlmode": false,
    "fullscreen": false,
    "hidden": false,
    "revision": 7,
    "_id": "66633e8caf502d006b8252d4",
    "__v": 0,
    "createdAt": "2024-06-07T17:08:28.667Z",
    "lastUpdatedHash": "ab92d20c24b9cc11f80901b8f1623378f62ed918",
    "project": "62cde2919aafea009aefb289",
    "updatedAt": "2024-07-11T01:20:30.658Z",
    "user": "5af39863989da435b05d284e"
  },
  "meta": {
    "user": {
      "allowedProjects": ["cohere-ai", "cohere-enterprise"],
      "apiKey": "",
      "email": "andrewjiang@hey.com",
      "name": "Andrew Jiang",
      "version": 1,
      "Name": "Andrew Jiang",
      "Email": "andrewjiang@hey.com",
      "APIKey": "",
      "AllowedProjects": ["cohere-ai", "cohere-enterprise"]
    },
    "baseUrl": "/",
    "hidden": false,
    "title": "PDF Extractor with Native Multi Step Tool Use",
    "metaTitle": "PDF Extractor with Native Multi Step Tool Use",
    "keywords": "",
    "description": "",
    "image": [],
    "slug": "pdf-extractor",
    "type": "custompage",
    "full": false
  }
}
